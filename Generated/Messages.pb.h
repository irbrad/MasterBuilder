// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#ifndef PROTOBUF_Messages_2eproto__INCLUDED
#define PROTOBUF_Messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Messages_2eproto();
void protobuf_AssignDesc_Messages_2eproto();
void protobuf_ShutdownFile_Messages_2eproto();

class MsgBase;
class Register;
class Unregister;
class Load;
class RequestCPU;
class ReleaseCPU;
class Ping;

enum MsgBase_MsgId {
  MsgBase_MsgId_Invalid = 1,
  MsgBase_MsgId_Register = 2,
  MsgBase_MsgId_Unregister = 3,
  MsgBase_MsgId_Load = 4,
  MsgBase_MsgId_RequestCPU = 5,
  MsgBase_MsgId_ReleaseCPU = 6,
  MsgBase_MsgId_Ping = 7
};
bool MsgBase_MsgId_IsValid(int value);
const MsgBase_MsgId MsgBase_MsgId_MsgId_MIN = MsgBase_MsgId_Invalid;
const MsgBase_MsgId MsgBase_MsgId_MsgId_MAX = MsgBase_MsgId_Ping;
const int MsgBase_MsgId_MsgId_ARRAYSIZE = MsgBase_MsgId_MsgId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgBase_MsgId_descriptor();
inline const ::std::string& MsgBase_MsgId_Name(MsgBase_MsgId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgBase_MsgId_descriptor(), value);
}
inline bool MsgBase_MsgId_Parse(
    const ::std::string& name, MsgBase_MsgId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgBase_MsgId>(
    MsgBase_MsgId_descriptor(), name, value);
}
// ===================================================================

class MsgBase : public ::google::protobuf::Message {
 public:
  MsgBase();
  virtual ~MsgBase();

  MsgBase(const MsgBase& from);

  inline MsgBase& operator=(const MsgBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBase& default_instance();

  void Swap(MsgBase* other);

  // implements Message ----------------------------------------------

  MsgBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBase& from);
  void MergeFrom(const MsgBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgBase_MsgId MsgId;
  static const MsgId Invalid = MsgBase_MsgId_Invalid;
  static const MsgId Register = MsgBase_MsgId_Register;
  static const MsgId Unregister = MsgBase_MsgId_Unregister;
  static const MsgId Load = MsgBase_MsgId_Load;
  static const MsgId RequestCPU = MsgBase_MsgId_RequestCPU;
  static const MsgId ReleaseCPU = MsgBase_MsgId_ReleaseCPU;
  static const MsgId Ping = MsgBase_MsgId_Ping;
  static inline bool MsgId_IsValid(int value) {
    return MsgBase_MsgId_IsValid(value);
  }
  static const MsgId MsgId_MIN =
    MsgBase_MsgId_MsgId_MIN;
  static const MsgId MsgId_MAX =
    MsgBase_MsgId_MsgId_MAX;
  static const int MsgId_ARRAYSIZE =
    MsgBase_MsgId_MsgId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgId_descriptor() {
    return MsgBase_MsgId_descriptor();
  }
  static inline const ::std::string& MsgId_Name(MsgId value) {
    return MsgBase_MsgId_Name(value);
  }
  static inline bool MsgId_Parse(const ::std::string& name,
      MsgId* value) {
    return MsgBase_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .MsgBase.MsgId Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::MsgBase_MsgId type() const;
  inline void set_type(::MsgBase_MsgId value);

  // required bytes Subclass = 2;
  inline bool has_subclass() const;
  inline void clear_subclass();
  static const int kSubclassFieldNumber = 2;
  inline const ::std::string& subclass() const;
  inline void set_subclass(const ::std::string& value);
  inline void set_subclass(const char* value);
  inline void set_subclass(const void* value, size_t size);
  inline ::std::string* mutable_subclass();
  inline ::std::string* release_subclass();
  inline void set_allocated_subclass(::std::string* subclass);

  // @@protoc_insertion_point(class_scope:MsgBase)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_subclass();
  inline void clear_has_subclass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* subclass_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static MsgBase* default_instance_;
};
// -------------------------------------------------------------------

class Register : public ::google::protobuf::Message {
 public:
  Register();
  virtual ~Register();

  Register(const Register& from);

  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Register& default_instance();

  void Swap(Register* other);

  // implements Message ----------------------------------------------

  Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // required uint32 CoreCount = 2;
  inline bool has_corecount() const;
  inline void clear_corecount();
  static const int kCoreCountFieldNumber = 2;
  inline ::google::protobuf::uint32 corecount() const;
  inline void set_corecount(::google::protobuf::uint32 value);

  // required uint32 Priority = 3;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 3;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Register)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_corecount();
  inline void clear_has_corecount();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* host_;
  ::google::protobuf::uint32 corecount_;
  ::google::protobuf::uint32 priority_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Register* default_instance_;
};
// -------------------------------------------------------------------

class Unregister : public ::google::protobuf::Message {
 public:
  Unregister();
  virtual ~Unregister();

  Unregister(const Unregister& from);

  inline Unregister& operator=(const Unregister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Unregister& default_instance();

  void Swap(Unregister* other);

  // implements Message ----------------------------------------------

  Unregister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Unregister& from);
  void MergeFrom(const Unregister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // @@protoc_insertion_point(class_scope:Unregister)
 private:
  inline void set_has_host();
  inline void clear_has_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* host_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Unregister* default_instance_;
};
// -------------------------------------------------------------------

class Load : public ::google::protobuf::Message {
 public:
  Load();
  virtual ~Load();

  Load(const Load& from);

  inline Load& operator=(const Load& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Load& default_instance();

  void Swap(Load* other);

  // implements Message ----------------------------------------------

  Load* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Load& from);
  void MergeFrom(const Load& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float Usage = 1;
  inline bool has_usage() const;
  inline void clear_usage();
  static const int kUsageFieldNumber = 1;
  inline float usage() const;
  inline void set_usage(float value);

  // @@protoc_insertion_point(class_scope:Load)
 private:
  inline void set_has_usage();
  inline void clear_has_usage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float usage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Load* default_instance_;
};
// -------------------------------------------------------------------

class RequestCPU : public ::google::protobuf::Message {
 public:
  RequestCPU();
  virtual ~RequestCPU();

  RequestCPU(const RequestCPU& from);

  inline RequestCPU& operator=(const RequestCPU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestCPU& default_instance();

  void Swap(RequestCPU* other);

  // implements Message ----------------------------------------------

  RequestCPU* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestCPU& from);
  void MergeFrom(const RequestCPU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional uint32 Core = 2;
  inline bool has_core() const;
  inline void clear_core();
  static const int kCoreFieldNumber = 2;
  inline ::google::protobuf::uint32 core() const;
  inline void set_core(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RequestCPU)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_core();
  inline void clear_has_core();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* host_;
  ::google::protobuf::uint32 core_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static RequestCPU* default_instance_;
};
// -------------------------------------------------------------------

class ReleaseCPU : public ::google::protobuf::Message {
 public:
  ReleaseCPU();
  virtual ~ReleaseCPU();

  ReleaseCPU(const ReleaseCPU& from);

  inline ReleaseCPU& operator=(const ReleaseCPU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReleaseCPU& default_instance();

  void Swap(ReleaseCPU* other);

  // implements Message ----------------------------------------------

  ReleaseCPU* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReleaseCPU& from);
  void MergeFrom(const ReleaseCPU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // required uint32 Core = 2;
  inline bool has_core() const;
  inline void clear_core();
  static const int kCoreFieldNumber = 2;
  inline ::google::protobuf::uint32 core() const;
  inline void set_core(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ReleaseCPU)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_core();
  inline void clear_has_core();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* host_;
  ::google::protobuf::uint32 core_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static ReleaseCPU* default_instance_;
};
// -------------------------------------------------------------------

class Ping : public ::google::protobuf::Message {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  void Swap(Ping* other);

  // implements Message ----------------------------------------------

  Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Alive = 1;
  inline bool has_alive() const;
  inline void clear_alive();
  static const int kAliveFieldNumber = 1;
  inline bool alive() const;
  inline void set_alive(bool value);

  // @@protoc_insertion_point(class_scope:Ping)
 private:
  inline void set_has_alive();
  inline void clear_has_alive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool alive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Ping* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgBase

// required .MsgBase.MsgId Type = 1;
inline bool MsgBase::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBase::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBase::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBase::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::MsgBase_MsgId MsgBase::type() const {
  return static_cast< ::MsgBase_MsgId >(type_);
}
inline void MsgBase::set_type(::MsgBase_MsgId value) {
  assert(::MsgBase_MsgId_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bytes Subclass = 2;
inline bool MsgBase::has_subclass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgBase::set_has_subclass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgBase::clear_has_subclass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgBase::clear_subclass() {
  if (subclass_ != &::google::protobuf::internal::kEmptyString) {
    subclass_->clear();
  }
  clear_has_subclass();
}
inline const ::std::string& MsgBase::subclass() const {
  return *subclass_;
}
inline void MsgBase::set_subclass(const ::std::string& value) {
  set_has_subclass();
  if (subclass_ == &::google::protobuf::internal::kEmptyString) {
    subclass_ = new ::std::string;
  }
  subclass_->assign(value);
}
inline void MsgBase::set_subclass(const char* value) {
  set_has_subclass();
  if (subclass_ == &::google::protobuf::internal::kEmptyString) {
    subclass_ = new ::std::string;
  }
  subclass_->assign(value);
}
inline void MsgBase::set_subclass(const void* value, size_t size) {
  set_has_subclass();
  if (subclass_ == &::google::protobuf::internal::kEmptyString) {
    subclass_ = new ::std::string;
  }
  subclass_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBase::mutable_subclass() {
  set_has_subclass();
  if (subclass_ == &::google::protobuf::internal::kEmptyString) {
    subclass_ = new ::std::string;
  }
  return subclass_;
}
inline ::std::string* MsgBase::release_subclass() {
  clear_has_subclass();
  if (subclass_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subclass_;
    subclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgBase::set_allocated_subclass(::std::string* subclass) {
  if (subclass_ != &::google::protobuf::internal::kEmptyString) {
    delete subclass_;
  }
  if (subclass) {
    set_has_subclass();
    subclass_ = subclass;
  } else {
    clear_has_subclass();
    subclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Register

// required string Host = 1;
inline bool Register::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Register::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Register::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Register::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& Register::host() const {
  return *host_;
}
inline void Register::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void Register::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void Register::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* Register::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Register::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 CoreCount = 2;
inline bool Register::has_corecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Register::set_has_corecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Register::clear_has_corecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Register::clear_corecount() {
  corecount_ = 0u;
  clear_has_corecount();
}
inline ::google::protobuf::uint32 Register::corecount() const {
  return corecount_;
}
inline void Register::set_corecount(::google::protobuf::uint32 value) {
  set_has_corecount();
  corecount_ = value;
}

// required uint32 Priority = 3;
inline bool Register::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Register::set_has_priority() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Register::clear_has_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Register::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 Register::priority() const {
  return priority_;
}
inline void Register::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
}

// -------------------------------------------------------------------

// Unregister

// required string Host = 1;
inline bool Unregister::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Unregister::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Unregister::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Unregister::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& Unregister::host() const {
  return *host_;
}
inline void Unregister::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void Unregister::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void Unregister::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Unregister::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* Unregister::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Unregister::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Load

// required float Usage = 1;
inline bool Load::has_usage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Load::set_has_usage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Load::clear_has_usage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Load::clear_usage() {
  usage_ = 0;
  clear_has_usage();
}
inline float Load::usage() const {
  return usage_;
}
inline void Load::set_usage(float value) {
  set_has_usage();
  usage_ = value;
}

// -------------------------------------------------------------------

// RequestCPU

// optional string Host = 1;
inline bool RequestCPU::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestCPU::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestCPU::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestCPU::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& RequestCPU::host() const {
  return *host_;
}
inline void RequestCPU::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void RequestCPU::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void RequestCPU::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestCPU::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* RequestCPU::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestCPU::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 Core = 2;
inline bool RequestCPU::has_core() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestCPU::set_has_core() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestCPU::clear_has_core() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestCPU::clear_core() {
  core_ = 0u;
  clear_has_core();
}
inline ::google::protobuf::uint32 RequestCPU::core() const {
  return core_;
}
inline void RequestCPU::set_core(::google::protobuf::uint32 value) {
  set_has_core();
  core_ = value;
}

// -------------------------------------------------------------------

// ReleaseCPU

// required string Host = 1;
inline bool ReleaseCPU::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReleaseCPU::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReleaseCPU::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReleaseCPU::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& ReleaseCPU::host() const {
  return *host_;
}
inline void ReleaseCPU::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void ReleaseCPU::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void ReleaseCPU::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReleaseCPU::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* ReleaseCPU::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReleaseCPU::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 Core = 2;
inline bool ReleaseCPU::has_core() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReleaseCPU::set_has_core() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReleaseCPU::clear_has_core() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReleaseCPU::clear_core() {
  core_ = 0u;
  clear_has_core();
}
inline ::google::protobuf::uint32 ReleaseCPU::core() const {
  return core_;
}
inline void ReleaseCPU::set_core(::google::protobuf::uint32 value) {
  set_has_core();
  core_ = value;
}

// -------------------------------------------------------------------

// Ping

// optional bool Alive = 1;
inline bool Ping::has_alive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ping::set_has_alive() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ping::clear_has_alive() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ping::clear_alive() {
  alive_ = false;
  clear_has_alive();
}
inline bool Ping::alive() const {
  return alive_;
}
inline void Ping::set_alive(bool value) {
  set_has_alive();
  alive_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgBase_MsgId>() {
  return ::MsgBase_MsgId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Messages_2eproto__INCLUDED
